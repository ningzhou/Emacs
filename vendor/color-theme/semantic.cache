;; Object semantic.cache
;; SEMANTICDB Tags save file
(semanticdb-project-database "semantic.cache"
  :file "semantic.cache"
  :tables (list 
   (semanticdb-table "color-theme.el"
    :file "color-theme.el"
    :pointmax 757568
    :major-mode 'emacs-lisp-mode
    :tokens '(("cl" include nil nil nil [8746 8759]) ("cus-face" include nil nil nil [8858 8877]) ("wid-edit" include nil nil nil [8878 8897]) ("color-theme-maintainer-address" variable nil "alex@gnu.org" ((const . t)) "Address used by `submit-color-theme'." nil [8938 9036]) ("cond" code nil [9092 9300]) ("color-theme-xemacs-p" variable nil (string-match "XEmacs" emacs-version) nil "Non-nil if running XEmacs." nil [9302 9400]) ("cond" code nil [10010 10384]) ("color-theme-alist" function nil ("plist") nil "Transform PLIST into an alist if it is a plist and return it.
If the first element of PLIST is a cons cell, we just return PLIST,
assuming PLIST to be an alist.  If the first element of plist is not a
symbol, this is an error: We cannot distinguish a plist from an ordinary
list, but a list that doesn't start with a symbol is certainly no plist
and no alist.

This is used to make sure `default-frame-alist' really is an alist and not
a plist.  In XEmacs, the alist is deprecated; a plist is used instead." nil [10386 11079]) ("defgroup" code nil [11112 11293]) ("color-theme-legal-frame-parameters" variable nil "\\(color\\|mode\\)$" nil "Regexp that matches frame parameter names.
Only frame parameter names that match this regexp can be changed as part
of a color theme." nil [11295 11768]) ("color-theme-legal-variables" variable nil "\\(color\\|face\\)$" nil "Regexp that matches variable names.
Only variables that match this regexp can be changed as part of a color
theme.  In addition to matching this name, the variables have to be user
variables (see function `user-variable-p')." nil [11770 12098]) ("color-theme-illegal-faces" variable nil "^w3-" nil "Regexp that matches face names forbidden in themes.
The default setting \"^w3-\" excludes w3 faces since these
are created dynamically." nil [12100 12417]) ("color-theme-illegal-default-attributes" variable nil (quote (:family :height :width)) nil "A list of face properties to be ignored when installing faces.
This prevents Emacs from doing terrible things to your display just because
a theme author likes weird fonts." nil [12419 12719]) ("color-theme-is-global" variable nil t ((user-visible . t)) "*Determines wether a color theme is installed on all frames or not.
If non-nil, color themes will be installed for all frames.
If nil, color themes will be installed for the selected frame only.

A possible use for this variable is dynamic binding. Here is a larger
example to put in your ~/.emacs; it will make the Blue Sea color theme
the default used for the first frame, and it will create two additional
frames with different color themes.

setup:
    (require 'color-theme)
    ;; set default color theme
    (color-theme-blue-sea)
    ;; create some frames with different color themes
    (let ((color-theme-is-global nil))
      (select-frame (make-frame))
      (color-theme-gnome2)
      (select-frame (make-frame))
      (color-theme-standard))

Please note that using XEmacs and and a nil value for
color-theme-is-global will ignore any variable settings for the color
theme, since XEmacs doesn't have frame-local variable bindings.

Also note that using Emacs and a non-nil value for color-theme-is-global
will install a new color theme for all frames.  Using XEmacs and a
non-nil value for color-theme-is-global will install a new color theme
only on those frames that are not using a local color theme." nil [12721 14024]) ("color-theme-is-cumulative" variable nil t ((user-visible . t)) "*Determines wether new color themes are installed on top of each other.
If non-nil, installing a color theme will undo all settings made by
previous color themes." nil [14026 14271]) ("color-theme-mode-hook" variable nil nil nil "Hook for color-theme-mode." nil [14273 14377]) ("color-theme-mode-map" variable nil (let ((map (make-sparse-keymap))) (define-key map (kbd "RET") (quote color-theme-install-at-point)) (define-key map (kbd "c") (quote list-colors-display)) (define-key map (kbd "d") (quote color-theme-describe)) (define-key map (kbd "f") (quote list-faces-display)) (define-key map (kbd "i") (quote color-theme-install-at-point)) (define-key map (kbd "l") (quote color-theme-install-at-point-for-current-frame)) (define-key map (kbd "p") (quote color-theme-print)) (define-key map (kbd "q") (quote bury-buffer)) (define-key map (kbd "?") (quote color-theme-describe)) (if color-theme-xemacs-p (define-key map (kbd "<button2>") (quote color-theme-install-at-mouse)) (define-key map (kbd "<mouse-2>") (quote color-theme-install-at-mouse))) map) nil "Mode map used for the buffer created by `color-theme-select'." nil [14379 15192]) ("color-theme-buffer-name" variable nil "*Color Theme Selection*" nil "Name of the color theme selection buffer." nil [15194 15298]) ("color-theme-original-frame-alist" variable nil nil nil "nil until one of the color themes has been installed." nil [15300 15403]) ("color-theme-history" variable nil nil nil "List of color-themes called, in reverse order" nil [15405 15487]) ("color-theme-history-max-length" variable nil nil nil "Max length of history to maintain.
Two other values are acceptable: t means no limit, and
nil means that no history is maintained." nil [15489 15788]) ("color-theme-counter" variable nil 0 nil "Counter for every addition to `color-theme-history'.
This counts how many themes were installed, regardless
of `color-theme-history-max-length'." nil [15790 15969]) ("color-theme-add-to-history" function nil ("name") nil "Add color-theme NAME to `color-theme-history'." nil [15971 16473]) ("color-themes" variable nil (quote ((color-theme-aalto-dark "Aalto Dark" "Jari Aalto <jari.aalto@poboxes.com>") (color-theme-aalto-light "Aalto Light" "Jari Aalto <jari.aalto@poboxes.com>") (color-theme-aliceblue "Alice Blue" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-arjen "Arjen" "Arjen Wiersma <arjen@wiersma.org>") (color-theme-beige-diff "Beige Diff" "Alex Schroeder <alex@gnu.org>" t) (color-theme-bharadwaj "Bharadwaj" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-bharadwaj-slate "Bharadwaj Slate" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-billw "Billw" "Bill White <billw@wolfram.com>") (color-theme-black-on-gray "BlackOnGray" "Sudhir Bhojwani <sbhojwani@altoweb.com>") (color-theme-blippblopp "Blipp Blopp" "Thomas Sicheritz-Ponten<thomas@biopython.org>") (color-theme-simple-1 "Black" "Jonadab <jonadab@bright.net>") (color-theme-blue-erc "Blue ERC" "Alex Schroeder <alex@gnu.org>" t) (color-theme-blue-gnus "Blue Gnus" "Alex Schroeder <alex@gnu.org>" t) (color-theme-blue-mood "Blue Mood" "Nelson Loyola <nloyola@yahoo.com>") (color-theme-blue-sea "Blue Sea" "Alex Schroeder <alex@gnu.org>") (color-theme-goldenrod "Cheap Goldenrod" "Alex Schroeder <alex@gnu.org>") (color-theme-classic "Classic" "Frederic Giroud <postcard@worldonline.fr>") (color-theme-comidia "Comidia" "Marcelo Dias de Toledo <mtole@ig.com.br>") (color-theme-euphoria "Euphoria" "oGLOWo@oGLOWo.cjb.net") (color-theme-jsc-dark "Cooper Dark" "John S Cooper <John.Cooper@eu.citrix.com>") (color-theme-jsc-light "Cooper Light" "John S Cooper <John.Cooper@eu.citrix.com>") (color-theme-jsc-light2 "Cooper Light 2" "John S Cooper <John.Cooper@eu.citrix.com>") (color-theme-dark-blue "Dark Blue" "Chris McMahan <cmcmahan@one.net>") (color-theme-dark-blue2 "Dark Blue 2" "Chris McMahan <cmcmahan@one.net>") (color-theme-dark-green "Dark Green" "eddy_woody@hotmail.com") (color-theme-dark-laptop "Dark Laptop" "Laurent Michel <ldm@cs.brown.edu>") (color-theme-deep-blue "Deep Blue" "Tomas Cerha <cerha@brailcom.org>") (color-theme-digital-ofs1 "Digital OFS1" "Gareth Owen <gowen@gwowen.freeserve.co.uk>") (color-theme-fischmeister "Fischmeister" "Sebastian Fischmeister <sfischme@nexus.lzk.tuwien.ac.at>") (color-theme-gnome "Gnome" "Jonadab <jonadab@bright.net>") (color-theme-gnome2 "Gnome 2" "Alex Schroeder <alex@gnu.org>") (color-theme-gray1 "Gray1" "Paul Pulli <P.Pulli@motorola.com>") (color-theme-gray30 "Gray30" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-kingsajz "Green Kingsajz" "Olgierd `Kingsajz' Ziolko <kingsajz@rpg.pl>") (color-theme-greiner "Greiner" "Kevin Greiner <kgreiner@mapquest.com>") (color-theme-gtk-ide "GTK IDE" "Gordon Messmer <gordon@dragonsdawn.net>") (color-theme-high-contrast "High Contrast" "Alex Schroeder <alex@gnu.org>") (color-theme-hober "Hober" "Edward O'Connor <ted@oconnor.cx>") (color-theme-infodoc "Infodoc" "Frederic Giroud <postcard@worldonline.fr>") (color-theme-jb-simple "JB Simple" "jeff@dvns.com") (color-theme-jedit-grey "Jedit Grey" "Gordon Messmer <gordon@dragonsdawn.net>") (color-theme-jonadabian "Jonadab" "Jonadab <jonadab@bright.net>") (color-theme-jonadabian-slate "Jonadabian Slate" "Jonadab <jonadab@bright.net>") (color-theme-katester "Katester" "Higgins_Walter@emc.com") (color-theme-lethe "Lethe" "Ivica Loncar <ivica.loncar@srk.fer.hr>") (color-theme-ld-dark "Linh Dang Dark" "Linh Dang <linhd@nortelnetworks.com>") (color-theme-marine "Marine" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-marquardt "Marquardt" "Colin Marquardt <colin@marquardt-home.de>") (color-theme-midnight "Midnight" "Gordon Messmer <gordon@dragonsdawn.net>") (color-theme-mistyday "Misty Day" "Hari Kumar <Hari.Kumar@mtm.kuleuven.ac.be>") (color-theme-montz "Montz" "Brady Montz <bradym@becomm.com>") (color-theme-oswald "Oswald" "Tom Oswald <toswald@sharplabs.com>") (color-theme-parus "Parus" "Jon K Hellan <hellan@acm.org>") (color-theme-pierson "Pierson" "Dan L. Pierson <dan@sol.control.com>") (color-theme-ramangalahy "Ramangalahy" "Solofo Ramangalahy <solofo@irisa.fr>") (color-theme-raspopovic "Raspopovic" "Pedja Raspopovic <pedja@lsil.com>") (color-theme-resolve "Resolve" "Damien Elmes <resolve@repose.cx>") (color-theme-retro-green "Retro Green" "Alex Schroeder <alex@gnu.org>") (color-theme-retro-orange "Retro Orange" "Alex Schroeder <alex@gnu.org>") (color-theme-robin-hood "Robin Hood" "Alex Schroeder <alex@gnu.org>") (color-theme-rotor "Rotor" "Jinwei Shen <shenjw@wam.umd.edu>") (color-theme-ryerson "Ryerson" "Luis Fernandes <elf@ee.ryerson.ca>") (color-theme-salmon-diff "Salmon Diff" "Alex Schroeder <alex@gnu.org>" t) (color-theme-salmon-font-lock "Salmon Font-Lock" "Alex Schroeder <alex@gnu.org>" t) (color-theme-scintilla "Scintilla" "Gordon Messmer <gordon@dragonsdawn.net>") (color-theme-shaman "Shaman" "shaman@interdon.net") (color-theme-sitaramv-nt "Sitaram NT" "Sitaram Venkatraman <sitaramv@loc251.tandem.com>") (color-theme-sitaramv-solaris "Sitaram Solaris" "Sitaram Venkatraman <sitaramv@loc251.tandem.com>") (color-theme-snow "Snow" "Nicolas Rist <Nicolas.Rist@alcatel.de>") (color-theme-snowish "Snowish" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-standard-ediff "Standard Ediff" "Emacs Team, added by Alex Schroeder <alex@gnu.org>" t) (color-theme-standard "Standard Emacs 20" "Emacs Team, added by Alex Schroeder <alex@gnu.org>") (color-theme-emacs-21 "Standard Emacs 21" "Emacs Team, added by Alex Schroeder <alex@gnu.org>") (color-theme-emacs-nw "Standard Emacs 21 No Window" "Emacs Team, added by D. Goel <deego@gnufans.org>") (color-theme-xemacs "Standard XEmacs" "XEmacs Team, added by Alex Schroeder <alex@gnu.org>") (color-theme-subtle-blue "Subtle Blue" "Chris McMahan <cmcmahan@one.net>") (color-theme-subtle-hacker "Subtle Hacker" "Colin Walters <levanti@verbum.org>") (color-theme-taming-mr-arneson "Taming Mr Arneson" "Erik Arneson <erik@aarg.net>") (color-theme-taylor "Taylor" "Art Taylor <reeses@hemisphere.org>") (color-theme-tty-dark "TTY Dark" "O Polite <m2@plusseven.com>") (color-theme-whateveryouwant "Whateveryouwant" "Fabien Penso <penso@linuxfr.org>, color by Scott Jaderholm <scott@jaderholm.com>") (color-theme-wheat "Wheat" "Alex Schroeder <alex@gnu.org>") (color-theme-pok-wob "White On Black" "S. Pokrovsky <pok@nbsp.nsk.su>") (color-theme-pok-wog "White On Grey" "S. Pokrovsky <pok@nbsp.nsk.su>") (color-theme-word-perfect "WordPerfect" "Thomas Gehrlein <Thomas.Gehrlein@t-online.de>") (color-theme-xp "XP" "Girish Bharadwaj <girishb@gbvsoft.com>"))) nil "List of color themes.

Each THEME is itself a three element list (FUNC NAME MAINTAINER &optional LIBRARY).

FUNC is a color theme function which does the setup.  The function
FUNC may call `color-theme-install'.  The color theme function may be
interactive.

NAME is the name of the theme and MAINTAINER is the name and/or email of
the maintainer of the theme.

If LIBRARY is non-nil, the color theme will be considered a library and
may not be shown in the default menu.

If you defined your own color theme and want to add it to this list,
use something like this:

  (add-to-list 'color-themes '(color-theme-gnome2 \"Gnome2\" \"Alex\"))" nil [16624 24125]) ("color-theme-backup-original-values" function nil nil nil "Back up the original `default-frame-alist'.
The values are stored in `color-theme-original-frame-alist' on
startup." nil [24142 24501]) ("add-hook" code nil [24502 24565]) ("color-theme-select" function nil ("&optional" "arg") ((user-visible . t)) "Displays a special buffer for selecting and installing a color theme.
With optional prefix ARG, this buffer will include color theme libraries
as well.  A color theme library is in itself not complete, it must be
used as part of another color theme to be useful.  Thus, color theme
libraries are mainly useful for color theme authors." nil [24567 26219]) ("easymenu" include nil nil nil [26221 26240]) ("easy-menu-add-item" code nil [26241 26281]) ("easy-menu-add-item" code nil [26282 26358]) ("color-theme-mode" function nil nil nil "Major mode to select and install color themes.

Use \\[color-theme-install-at-point] to install a color theme on all frames.
Use \\[color-theme-install-at-point-for-current-frame] to install a color theme for the current frame only.

The changes are applied on top of your current setup.  This is a
feature.

Some of the themes should be considered extensions to the standard color
theme: they modify only a limited number of faces and variables.  To
verify the final look of a color theme, install the standard color
theme, then install the other color theme.  This is a feature. It allows
you to mix several color themes.

Use \\[color-theme-describe] to read more about the color theme function at point.
If you want to install the color theme permanently, put the call to the
color theme function into your ~/.emacs:

    (require 'color-theme)
    (color-theme-gnome2)

If you worry about the size of color-theme.el: You are right.  Use
\\[color-theme-print] to print the current color theme and save the resulting buffer
as ~/.emacs-color-theme.  Now you can install only this specific color
theme in your .emacs:

    (load-file \"~/.emacs-color-theme\")
    (my-color-theme)

The Emacs menu is not affected by color themes within Emacs.  Depending
on the toolkit you used to compile Emacs, you might have to set specific
X ressources.  See the info manual for more information.  Here is an
example ~/.Xdefaults fragment:

    emacs*Background: DarkSlateGray
    emacs*Foreground: wheat

\\{color-theme-mode-map}

The color themes are listed in `color-themes', which see." nil [26360 28212]) ("color-theme-describe" function nil nil ((user-visible . t)) "Describe color theme listed at point.
This shows the documentation of the value of text-property color-theme
at point.  The text-property color-theme should be a color theme
function.  See `color-themes'." nil [28258 28577]) ("color-theme-install-at-mouse" function nil ("event") ((user-visible . t)) "Install color theme clicked upon using the mouse.
First argument EVENT is used to set point.  Then
`color-theme-install-at-point' is called." nil [28579 28870]) ("color-theme-install-at-point" function nil nil ((user-visible . t)) "Install color theme at point.
This calls the value of the text-property `color-theme' at point.
The text-property `color-theme' should be a color theme function.
See `color-themes'." nil [28872 29712]) ("color-theme-install-at-point-for-current-frame" function nil nil ((user-visible . t)) "Install color theme at point for current frame only.
Binds `color-theme-is-global' to nil and calls
`color-theme-install-at-point'." nil [29714 29996]) ("color-theme-filter" function nil ("old-list" "regexp" "&optional" "exclude") nil "Filter OLD-LIST.
The resulting list will be newly allocated and contains only elements
with names matching REGEXP.  OLD-LIST may be a list or an alist.  If you
want to filter a plist, use `color-theme-alist' to convert your plist to
an alist, first.

If the optional argument EXCLUDE is non-nil, then the sense is
reversed: only non-matching elements will be retained." nil [30074 31232]) ("color-theme-spec-filter" function nil ("spec") nil "Filter the attributes in SPEC.
This makes sure that SPEC has the form ((t (PLIST ...))).
Only properties not in `color-theme-illegal-default-attributes'
are included in the SPEC returned." nil [31234 31754]) ("color-theme-plist-delete" function nil ("plist" "prop") nil "Delete property PROP from property list PLIST by side effect.
This modifies PLIST." nil [32059 32536]) ("if" code nil [32859 33812]) ("color-theme-spec-canonical-font" function nil ("atts") nil "Add :bold and :italic attributes if necessary." nil [34113 34644]) ("color-theme-spec-resolve-height" function nil ("old" "new") nil "Return the new height given OLD and NEW height.
OLD is the current setting, NEW is the setting inherited from." nil [35103 35763]) ("color-theme-spec-resolve-inheritance" function nil ("atts") nil "Resolve all occurences of the :inherit attribute." nil [36224 37396]) ("color-theme-spec-maybe-invert" function nil ("atts") nil "Remove the :inverse-video attribute from ATTS.
If ATTS contains :inverse-video t, remove it and swap foreground and
background color.  Return ATTS." nil [38413 39149]) ("color-theme-spec" function nil ("face") nil "Return a list for FACE which has the form (FACE SPEC).
See `defface' for the format of SPEC.  In this case we use only one
DISPLAY, t, and determine ATTS using `color-theme-face-attr-construct'.
If ATTS is nil, (nil) is used  instead.

If ATTS contains :inverse-video t, we remove it and swap foreground and
background color using `color-theme-spec-maybe-invert'.  We do this
because :inverse-video is handled differently in Emacs and XEmacs.  We
will loose on a tty without colors, because in that situation,
:inverse-video means something." nil [39713 40545]) ("color-theme-get-params" function nil nil nil "Return a list of frame parameter settings usable in a color theme.
Such an alist may be installed by `color-theme-install-frame-params'.  The
frame parameters returned must match `color-theme-legal-frame-parameters'." nil [40547 41012]) ("color-theme-get-vars" function nil nil nil "Return a list of variable settings usable in a color theme.
Such an alist may be installed by `color-theme-install-variables'.
The variable names must match `color-theme-legal-variables', and the
variable must be a user variable according to `user-variable-p'." nil [41014 41605]) ("color-theme-print-alist" function nil ("alist") nil "Print ALIST." nil [41607 41872]) ("color-theme-get-faces" function nil nil nil "Return a list of faces usable in a color theme.
Such an alist may be installed by `color-theme-install-faces'.  The
faces returned must not match `color-theme-illegal-faces'." nil [41874 42347]) ("color-theme-get-face-definitions" function nil nil nil "Return face settings usable in a color-theme." nil [42349 42521]) ("color-theme-print-faces" function nil ("faces") nil "Print face settings for all faces returned by `color-theme-get-faces'." nil [42523 42794]) ("color-theme-reset-faces" function nil nil nil "Reset face settings for all faces returned by `color-theme-get-faces'." nil [42796 43372]) ("color-theme-print-theme" function nil ("func" "doc" "params" "vars" "faces") nil "Print a theme into the current buffer.
FUNC is the function name, DOC the doc string, PARAMS the
frame parameters, VARS the variable bindings, and FACES
the list of faces and their specs." nil [43374 44026]) ("color-theme-print" function nil ("&optional" "buf") ((user-visible . t)) "Print the current color theme function.

You can contribute this function to <URL:news:gnu.emacs.sources> or
paste it into your .emacs file and call it.  That should recreate all
the settings necessary for your color theme.

Example:

    (require 'color-theme)
    (defun my-color-theme ()
      \"Color theme by Alex Schroeder, created 2000-05-17.\"
      (interactive)
      (color-theme-install
       '(...
	 ...
	 ...)))
    (my-color-theme)

If you want to use a specific color theme function, you can call the
color theme function in your .emacs directly.

Example:

    (require 'color-theme)
    (color-theme-gnome2)" nil [44028 45423]) ("color-theme-analyze-find-theme" function nil ("code") nil "Find the sexpr that calls `color-theme-install'." nil [45425 45772]) ("color-theme-analyze-add-face" function nil ("a" "b" "regexp" "faces") nil "If only one of A or B are in FACES, the other is added, and FACES is returned.
If REGEXP is given, this is only done if faces contains a match for regexps." nil [46337 46971]) ("color-theme-analyze-add-faces" function nil ("faces") nil "Add missing faces to FACES and return it." nil [47938 51201]) ("color-theme-analyze-remove-heights" function nil ("faces") nil "Remove :height property where it is an integer and return FACES." nil [51203 52155]) ("color-theme-analyze-defun" function nil nil ((user-visible . t)) "Once you have a color-theme printed, check for missing faces.
This is used by maintainers who receive a color-theme submission
and want to make sure it follows the guidelines by the color-theme
author." nil [52385 54422]) ("color-theme-snapshot" function nil nil nil nil nil [54476 54508]) ("color-theme-make-snapshot" function nil nil nil "Return the definition of the current color-theme.
The function returned will recreate the color-theme in use at the moment." nil [54510 55257]) ("color-theme-frame-param-frobbing-rules" variable nil (quote ((foreground-color default foreground) (background-color default background))) nil "List of rules to use when frobbing faces based on frame parameters.
This is only necessary for XEmacs, because in Emacs 21 changing the
frame paramters automatically affects the relevant faces." nil [55319 55649]) ("color-theme-frob-faces" function nil ("params") nil "Change certain faces according to PARAMS.
This uses `color-theme-frame-param-frobbing-rules'." nil [55651 56081]) ("color-theme-alist-reduce" function nil ("old-list") nil "Reduce OLD-LIST.
The resulting list will be newly allocated and will not contain any elements
with duplicate cars.  This will speed the installation of new themes by
only installing unique attributes." nil [56083 56476]) ("color-theme-install-frame-params" function nil ("params") nil "Change frame parameters using alist PARAMETERS.

If `color-theme-is-global' is non-nil, all frames are modified using
`modify-frame-parameters' and the PARAMETERS are prepended to
`default-frame-alist'.  The value of `initial-frame-alist' is not
modified.  If `color-theme-is-global' is nil, only the selected frame is
modified.  If `color-theme-is-cumulative' is nil, the frame parameters
are restored from `color-theme-original-frame-alist'.

If the current frame parameters have a parameter `minibuffer' with
value `only', then the frame parameters are not installed, since this
indicates a dedicated minibuffer frame.

Called from `color-theme-install'." nil [56478 58327]) ("color-theme-install-variables" function nil ("vars") nil "Change variables using alist VARS.
All variables matching `color-theme-legal-variables' are set.

If `color-theme-is-global' and `color-theme-xemacs-p' are nil, variables
are made frame-local before setting them.  Variables are set using `set'
in either case.  This may lead to problems if changing the variable
requires the usage of the function specified with the :set tag in
defcustom declarations.

Called from `color-theme-install'." nil [58402 59165]) ("color-theme-install-faces" function nil ("faces") nil "Change faces using FACES.

Change faces for all frames and create any faces listed in FACES which
don't exist.  The modified faces will be marked as \"unchanged from
its standard setting\".  This is OK, since the changes made by
installing a color theme should never by saved in .emacs by
customization code.

FACES should be a list where each entry has the form:

  (FACE SPEC)

See `defface' for the format of SPEC.

If `color-theme-is-global' is non-nil, faces are modified on all frames
using `face-spec-set'.  If `color-theme-is-global' is nil, faces are
only modified on the selected frame.  Non-existing faces are created
using `make-empty-face' in either case.  If `color-theme-is-cumulative'
is nil, all faces are reset before installing the new faces.

Called from `color-theme-install'." nil [59167 61075]) ("color-theme-canonic" function nil ("theme") nil "Return the canonic form of THEME.
This deals with all the backwards compatibility stuff." nil [62012 62589]) ("color-theme-function" function nil ("theme") nil "Return function used to create THEME." nil [62591 62685]) ("color-theme-frame-params" function nil ("theme") nil "Return frame-parameters defined by THEME." nil [62687 62789]) ("color-theme-variables" function nil ("theme") nil "Return variables set by THEME." nil [62791 62879]) ("color-theme-faces" function nil ("theme") nil "Return faces defined by THEME." nil [62881 62965]) ("color-theme-merge-alists" function nil ("&rest" "alists") nil "Merges all the alist arguments into one alist.
Only the first instance of every key will be part of the resulting
alist.  Membership will be tested using `assq'." nil [62967 63341]) ("color-theme-compare" function nil ("theme-a" "theme-b") ((user-visible . t)) "Compare two color themes.
This will print the differences between installing THEME-A and
installing THEME-B.  Note that the order is important: If a face is
defined in THEME-A and not in THEME-B, then this will not show up as a
difference, because there is no reset before installing THEME-B.  If a
face is defined in THEME-B and not in THEME-A, then this will show up as
a difference." nil [63713 65395]) ("color-theme-install" function nil ("theme") nil "Install a color theme defined by frame parameters, variables and faces.

The theme is installed for all present and future frames; any missing
faces are created.  See `color-theme-install-faces'.

THEME is a color theme definition.  See below for more information.

If you want to install a color theme from your .emacs, use the output
generated by `color-theme-print'.  This produces color theme function
which you can copy to your .emacs.

A color theme definition is a list:
([FUNCTION] FRAME-PARAMETERS VARIABLE-SETTINGS FACE-DEFINITIONS)

FUNCTION is the color theme function which called `color-theme-install'.
This is no longer used.  There was a time when this package supported
automatic factoring of color themes.  This has been abandoned.

FRAME-PARAMETERS is an alist of frame parameters.  These are installed
with `color-theme-install-frame-params'.  These are installed last such
that any changes to the default face can be changed by the frame
parameters.

VARIABLE-DEFINITIONS is an alist of variable settings.  These are
installed with `color-theme-install-variables'.

FACE-DEFINITIONS is an alist of face definitions.  These are installed
with `color-theme-install-faces'.

If `color-theme-is-cumulative' is nil, a color theme will undo face and
frame-parameter settings of previous color themes." nil [65430 67146]) ("color-theme-submit" function nil nil ((user-visible . t)) "Submit your color-theme to the maintainer." nil [67174 69092]) ("color-theme-gnome" function nil nil ((user-visible . t)) "Wheat on darkslategrey scheme.
From one version of Emacs in RH6 and Gnome, modified by Jonadab." nil [69128 70103]) ("color-theme-blue-gnus" function nil nil ((user-visible . t)) "Color theme for gnus and message faces only.
This is intended for other color themes to use (eg. `color-theme-gnome2'
and `color-theme-blue-sea')." nil [70105 75107]) ("color-theme-blue-eshell" function nil nil ((user-visible . t)) "Color theme for eshell faces only.
This is intended for other color themes to use (eg. `color-theme-gnome2')." nil [75109 76339]) ("color-theme-salmon-font-lock" function nil nil ((user-visible . t)) "Color theme for font-lock faces only.
This is intended for other color themes to use (eg. `color-theme-gnome2')." nil [76341 77382]) ("color-theme-gnome2" function nil nil ((user-visible . t)) "Wheat on darkslategrey scheme.
`color-theme-gnome' started it all.

This theme supports standard faces, font-lock, eshell, info, message,
gnus, custom, widget, woman, diary, cperl, bbdb, and erc.  This theme
includes faces for Emacs and XEmacs.

The theme does not support w3 faces because w3 faces can be controlled
by your default style sheet.

This is what you should put in your .Xdefaults file, if you want to
change the colors of the menus in Emacs 20 as well:

emacs*Background:		DarkSlateGray
emacs*Foreground:		Wheat" nil [77384 82441]) ("color-theme-simple-1" function nil nil ((user-visible . t)) "Black background.
Doesn't mess with most faces, but does turn on dark background mode." nil [82443 83171]) ("color-theme-jonadabian" function nil nil ((user-visible . t)) "Dark blue background.
Supports standard faces, font-lock, highlight-changes, widget and
custom." nil [83173 84791]) ("color-theme-ryerson" function nil nil ((user-visible . t)) "White on midnightblue scheme.
Used at Ryerson Polytechnic University in the Electronic Engineering department." nil [84793 85589]) ("color-theme-wheat" function nil nil ((user-visible . t)) "Default colors on a wheat background.
Calls the standard color theme function `color-theme-standard' in order
to reset all faces." nil [85591 85924]) ("color-theme-standard" function nil nil ((user-visible . t)) "Emacs default colors.
If you are missing standard faces in this theme, please notify the maintainer." nil [85926 100185]) ("color-theme-fischmeister" function nil nil ((user-visible . t)) "The light colors on a grey blackground.
Sebastian Fischmeister <sfischme@nexus.lzk.tuwien.ac.at>" nil [100187 102028]) ("color-theme-sitaramv-solaris" function nil nil ((user-visible . t)) "White on a midnight blue background.  Lots of yellow and orange.
Includes faces for font-lock, widget, custom, speedbar, message, gnus,
eshell." nil [102030 112171]) ("color-theme-sitaramv-nt" function nil nil ((user-visible . t)) "Black foreground on white background.
Includes faces for font-lock, widget, custom, speedbar." nil [112173 115677]) ("color-theme-billw" function nil nil ((user-visible . t)) "Cornsilk on black.
Includes info, diary, font-lock, eshell, sgml, message, gnus,
widget, custom, latex, ediff." nil [115679 127050]) ("color-theme-retro-green" function nil ("&optional" "color" "func") ((user-visible . t)) "Plain green on black faces for those longing for the good old days." nil [127052 128250]) ("color-theme-retro-orange" function nil nil ((user-visible . t)) "Plain orange on black faces for those longing for the good old days." nil [128252 128439]) ("color-theme-subtle-hacker" function nil nil ((user-visible . t)) "Subtle Hacker Color Theme.
Based on gnome2, but uses white for important things like comments,
and less of the unreadable tomato.  By Colin Walters <levanti@verbum.org>" nil [128441 132585]) ("color-theme-pok-wog" function nil nil ((user-visible . t)) "Low-contrast White-on-Gray by S.Pokrovsky.

The following might be a good addition to your .Xdefaults file:

Emacs.pane.menubar.background: darkGrey
Emacs.pane.menubar.foreground: black" nil [132587 140846]) ("color-theme-pok-wob" function nil nil ((user-visible . t)) "White-on-Black by S. Pokrovsky.

The following might be a good addition to your .Xdefaults file:

Emacs.pane.menubar.background: darkGrey
Emacs.pane.menubar.foreground: black" nil [140848 149679]) ("color-theme-blue-sea" function nil nil ((user-visible . t)) "The grey on midnight blue theme.

Includes faces for apropos, font-lock (Emacs and XEmacs), speedbar,
custom, widget, info, flyspell, gnus, message, man, woman, dired.

This is what you should put in your .Xdefaults file, if you want to
change the colors of the menus:

emacs*Background:		DarkSlateGray
emacs*Foreground:		Wheat" nil [149681 156566]) ("color-theme-rotor" function nil nil ((user-visible . t)) "Black on Beige color theme by Jinwei Shen, created 2000-06-08.
Supports default faces, font-lock, custom, widget, message, man,
show-paren, viper." nil [156568 161066]) ("color-theme-pierson" function nil nil ((user-visible . t)) "Black on White color theme by Dan L. Pierson, created 2000-06-08.
Supports default faces, font-lock, show-paren." nil [161068 162847]) ("color-theme-xemacs" function nil nil ((user-visible . t)) "XEmacs standard colors.
If you are missing standard faces in this theme, please notify the maintainer.
Currently, this theme includes the standard faces and font-lock faces, including
some faces used in Emacs only but which are needed to recreate the look of the
XEmacs color theme." nil [162849 167542]) ("color-theme-jsc-light" function nil nil ((user-visible . t)) "Color theme by John S Cooper, created 2000-06-08." nil [167544 175509]) ("color-theme-jsc-dark" function nil nil ((user-visible . t)) "Color theme by John S Cooper, created 2000-06-11." nil [175511 185840]) ("color-theme-greiner" function nil nil ((user-visible . t)) "Color theme by Kevin Greiner, created 2000-06-13.
Black on Beige, supports default, font-lock, speedbar, custom, widget
faces.  Designed to be easy on the eyes, particularly on Win32
computers which commonly have white window backgrounds." nil [185842 189386]) ("color-theme-jb-simple" function nil nil ((user-visible . t)) "Color theme by jeff, created 2000-06-14.
Uses white background and bold for many things" nil [189388 205922]) ("color-theme-beige-diff" function nil nil nil "Brownish faces for diff and change-log modes.
This is intended for other color themes to use (eg. `color-theme-gnome2'
and `color-theme-blue-sea')." nil [205924 207284]) ("color-theme-standard-ediff" function nil nil nil "Standard colors for ediff faces.
This is intended for other color themes to use
(eg. `color-theme-goldenrod')." nil [207286 208823]) ("color-theme-beige-eshell" function nil nil nil "Brownish colors for eshell faces only.
This is intended for other color themes to use (eg. `color-theme-goldenrod')." nil [208825 210050]) ("color-theme-goldenrod" function nil nil ((user-visible . t)) "Brown color theme.  Very different from the others.
Supports standard, font-lock and info faces, and it uses
`color-theme-blue-gnus', `color-theme-blue-erc' , and
`color-theme-beige-diff'." nil [210052 212720]) ("color-theme-ramangalahy" function nil nil ((user-visible . t)) "Color theme by Solofo Ramangalahy, created 2000-10-18.
Black on light grey, includes faces for vm, ispell, gnus,
dired, display-time, cperl, font-lock, widget, x-symbol." nil [212722 222988]) ("color-theme-raspopovic" function nil nil ((user-visible . t)) "Color theme by Pedja Raspopovic, created 2000-10-19.
Includes faces for dired, font-lock, info, paren." nil [222990 227537]) ("color-theme-taylor" function nil nil ((user-visible . t)) "Color theme by Art Taylor, created 2000-10-20.
Wheat on black.  Includes faces for font-lock, gnus, paren." nil [227539 232952]) ("color-theme-marquardt" function nil nil ((user-visible . t)) "Color theme by Colin Marquardt, created 2000-10-25.
Black on bisque, a light color. Based on some settings from Robin S. Socha.
Features some color changes to programming languages, especially vhdl-mode.
You might also want to put something like
   Emacs*Foreground:	       Black
   Emacs*Background:	       bisque2
in your ~/.Xdefaults." nil [232954 239806]) ("color-theme-parus" function nil nil ((user-visible . t)) "Color theme by Jon K Hellan, created 2000-11-01.
White on dark blue color theme.

There is some redundancy in the X resources, but I do not have time to
find out which should go or which should stay:

Emacs*dialog*Background:	midnightblue
Emacs*dialog*Foreground:	white
Emacs*popup*Background:		midnightblue
Emacs*popup*Foreground:		white
emacs*background:		#00005a
emacs*cursorColor:		gray90
emacs*foreground:		White
emacs.dialog*.background:	midnightblue
emacs.menu*.background:		midnightblue
emacs.pane.menubar.background:	midnightblue" nil [239808 247680]) ("color-theme-high-contrast" function nil nil ((user-visible . t)) "High contrast color theme, maybe for the visually impaired.
Watch out!  This will set a very large font-size!

If you want to modify the font as well, you should customize variable
`color-theme-legal-frame-parameters' to \"\\(color\\|mode\\|font\\|height\\|width\\)$\".
The default setting will prevent color themes from installing specific
fonts." nil [247682 250051]) ("color-theme-infodoc" function nil nil ((user-visible . t)) "Color theme by Frederic Giroud, created 2001-01-18.
Black on wheat scheme.  Based on infodoc (xemacs variant distribution),
with my favorit fontlock color." nil [250053 256744]) ("color-theme-classic" function nil nil ((user-visible . t)) "Color theme by Frederic Giroud, created 2001-01-18.
AntiqueWhite on darkslategrey scheme.  Based on Gnome 2, with my favorit
color foreground-color and fontlock color." nil [256746 262456]) ("color-theme-scintilla" function nil nil ((user-visible . t)) "Color theme by Gordon Messmer, created 2001-02-07.
Based on the Scintilla editor.

If you want to modify the font as well, you should customize variable
`color-theme-legal-frame-parameters' to \"\\(color\\|mode\\|font\\|height\\|width\\)$\".
The default setting will prevent color themes from installing specific
fonts." nil [262458 264357]) ("color-theme-gtk-ide" function nil nil ((user-visible . t)) "Color theme by Gordon Messmer, created 2001-02-07.
Inspired by a GTK IDE whose name I've forgotten.

If you want to modify the font as well, you should customize variable
`color-theme-legal-frame-parameters' to \"\\(color\\|mode\\|font\\|height\\|width\\)$\".
The default setting will prevent color themes from installing specific
fonts." nil [264359 266254]) ("color-theme-midnight" function nil nil ((user-visible . t)) "Color theme by Gordon Messmer, created 2001-02-07.
A color theme inspired by a certain IDE for Windows.  It's all from memory,
since I only used that software in college.

If you want to modify the font as well, you should customize variable
`color-theme-legal-frame-parameters' to \"\\(color\\|mode\\|font\\|height\\|width\\)$\".
The default setting will prevent color themes from installing specific
fonts." nil [266256 268052]) ("color-theme-jedit-grey" function nil nil ((user-visible . t)) "Color theme by Gordon Messmer, created 2001-02-07.
Based on a screenshot of jedit.

If you want to modify the font as well, you should customize variable
`color-theme-legal-frame-parameters' to \"\\(color\\|mode\\|font\\|height\\|width\\)$\".
The default setting will prevent color themes from installing specific
fonts." nil [268054 269726]) ("color-theme-snow" function nil nil ((user-visible . t)) "Color theme by Nicolas Rist, created 2001-03-08.
Black on gainsboro.  In Emacs, the text background is a shade darker
than the frame background: Gainsboro instead of snow.  This makes the
structure of the text clearer without being too agressive on the eyes.
On XEmacs, this doesn't really work as the frame and the default face
allways use the same foreground and background colors.
The color theme includes gnus, message, font-lock, sgml, and speedbar." nil [269728 276305]) ("color-theme-montz" function nil nil ((user-visible . t)) "Color theme by Brady Montz, created 2001-03-08.
Black on Gray.
Includes dired, bbdb, font-lock, gnus, message, viper, and widget." nil [276307 285692]) ("color-theme-aalto-light" function nil nil ((user-visible . t)) "Color theme by Jari Aalto, created 2001-03-08.
Black on light yellow.
Used for Win32 on a Nokia446Xpro monitor.
Includes cvs, font-lock, gnus, message, sgml, widget" nil [285694 293177]) ("color-theme-aalto-dark" function nil nil ((user-visible . t)) "Color theme by Jari Aalto, created 2001-03-08.
White on Deep Sky Blue 3.
Used for Unix Exceed on a Nokia446Xpro monitor.
Includes font-lock, info, and message." nil [293179 296133]) ("color-theme-blippblopp" function nil nil ((user-visible . t)) "Color theme by Thomas Sicheritz-Ponten, created 2001-03-12.
Used by researchers at Uppsala University and the Center for Biological
Sequence Analysis at the Technical University of Denmark. (As some of my
swedish friends couldn't pronounce Sicheritz - they choose to transform
it to something more \"swedish\": Blippblopp :-)
Includes font-lock and message." nil [296135 300023]) ("color-theme-hober" function nil ("&optional" "preview") ((user-visible . t)) "Does all sorts of crazy stuff.
Originally based on color-theme-standard, so I probably still have some
setting that I haven't changed. I also liberally copied settings from
the other themes in this package. The end result isn't much like the
other ones; I hope you like it." nil [300025 308639]) ("color-theme-bharadwaj" function nil nil ((user-visible . t)) "Color theme by Girish Bharadwaj, created 2001-03-28.
Black on gainsboro.  Includes BBDB, custom, cperl, cvs, dired, ediff,
erc, eshell, font-latex, font-lock, gnus, info, message, paren, sgml,
shell, speedbar, term, vhdl, viper, widget, woman, xref.  Wow!" nil [308641 327981]) ("color-theme-oswald" function nil nil ((user-visible . t)) "Color theme by Tom Oswald, created 2001-04-18.
Green on black, includes font-lock, show-paren, and ediff." nil [327983 331923]) ("color-theme-salmon-diff" function nil nil nil "Salmon and aquamarine faces for diff and change-log modes.
This is intended for other color themes to use (eg. `color-theme-gnome2')." nil [331925 333222]) ("color-theme-robin-hood" function nil nil ((user-visible . t)) "`color-theme-gnome2' with navajo white on green.
This theme tries to avoid underlined and italic faces, because
the fonts either look ugly, or do not exist.  The author himself
uses neep, for example." nil [333224 334435]) ("color-theme-snowish" function nil nil ((user-visible . t)) "Color theme by Girish Bharadwaj, created 2001-05-17.
Dark slate gray on snow2, lots of blue colors.
Includes custom, eshell, font-lock, gnus, html-helper,
hyper-apropos, jde, message, paren, semantic, speedbar,
term, widget." nil [334437 348479]) ("color-theme-dark-laptop" function nil nil ((user-visible . t)) "Color theme by Laurent Michel, created 2001-05-24.
Includes custom, fl, font-lock, gnus, message, widget." nil [348481 356798]) ("color-theme-taming-mr-arneson" function nil nil ((user-visible . t)) "Color theme by Erik Arneson, created 2001-06-12.
Light sky blue on black.  Includes bbdb, cperl, custom, cvs, diff,
dired, font-lock, html-helper, hyper-apropos, info, isearch, man,
message, paren, shell, and widget." nil [356800 365184]) ("color-theme-digital-ofs1" function nil nil ((user-visible . t)) "Color theme by Gareth Owen, created 2001-06-13.
This works well on an old, beat-up Digital Unix box with its 256 colour
display, on which other color themes hog too much of the palette.
Black on some shade of dark peach.  Includes bbdb, cperl, custom,
cvs, diff, dired, ediff, erc, eshell, font-latex, font-lock, gnus,
highlight, hproperty, html-helper, hyper-apropos, info, jde, man,
message, paren, searchm, semantic, sgml, shell, speedbar, term,
vhdl, viper, w3m, widget, woman, x-symbol, xref." nil [365186 393690]) ("color-theme-mistyday" function nil nil ((user-visible . t)) "Color theme by K.C. Hari Kumar, created 2001-06-13.
Black on mistyrose.  Includes CUA, calendar, diary, font-latex and
font-lock.  Uses backgrounds on some font-lock faces." nil [393692 397848]) ("color-theme-marine" function nil nil ((user-visible . t)) "Color theme by Girish Bharadwaj, created 2001-06-22.
Matches the MS Windows Marine color theme.
Includes custom, font-lock, paren, widget." nil [397850 402597]) ("color-theme-blue-erc" function nil nil nil "Color theme for erc faces only.
This is intended for other color themes to use (eg. `color-theme-gnome2')." nil [402599 405151]) ("color-theme-subtle-blue" function nil nil ((user-visible . t)) "Color theme by Chris McMahan, created 2001-09-06.
Light blue background.  Includes bbdb, comint, cperl, custom, cvs,
diary, dired, display-time, ecb, ediff, erc, eshell, font-lock,
gnus, html-helper, info, isearch, jde, message, paren, semantic,
sgml, speedbar, term, vhdl, viper, vm, widget, woman, xref, xxml." nil [405153 430494]) ("color-theme-dark-blue" function nil nil ((user-visible . t)) "Color theme by Chris McMahan, created 2001-09-09.
Based on `color-theme-subtle-blue' with a slightly darker background." nil [430496 432682]) ("color-theme-jonadabian-slate" function nil nil ((user-visible . t)) "Another slate-and-wheat color theme by Jonadab the Unsightly One.
Updated 2001-10-12." nil [432684 439961]) ("color-theme-gray1" function nil nil ((user-visible . t)) "Color theme by Paul Pulli, created 2001-10-19." nil [439963 443376]) ("color-theme-word-perfect" function nil nil ((user-visible . t)) "White on blue background, based on WordPerfect 5.1.
Color theme by Thomas Gehrlein, created 2001-10-21." nil [443378 450788]) ("color-theme-emacs-21" function nil nil ((user-visible . t)) "Color theme used by Emacs 21.1.
Added and adapted for XEmacs by Alex Schroeder.  Adaptation mostly
consisted of resolving :inherit attributes and adding missing faces.
This theme includes faces from the following Emacs libraries: add-log
calendar comint cus-edit cus-face custom diff-mode ediff-init re-builder
viper-init enriched em-ls em-prompt esh-test faces font-lock generic-x
gnus-art gnus-cite gnus message hilit-chg hi-lock info isearch log-view
paren pcvs-info antlr-mode cperl-mode ebrowse idlwave idlw-shell
make-mode sh-script vhdl-mode smerge-mode speedbar strokes artist
flyspell texinfo tex-mode tooltip vcursor wid-edit woman term man" nil [453235 481415]) ("color-theme-jsc-light2" function nil nil ((user-visible . t)) "Color theme by John S Cooper, created 2001-10-29.
This builds on `color-theme-jsc-light'." nil [481417 484488]) ("color-theme-ld-dark" function nil nil ((user-visible . t)) "Dark Color theme by Linh Dang, created 2001-11-06." nil [484490 498786]) ("color-theme-deep-blue" function nil nil ((user-visible . t)) "Color theme by Tomas Cerha, created 2001-11-13." nil [498788 505889]) ("color-theme-kingsajz" function nil nil ((user-visible . t)) "Color theme by Olgierd \"Kingsajz\" Ziolko, created 2001-12-04.
Another theme with wheat on DarkSlatGrey. Based on Subtle Hacker. 
Used on Emacs 21.1 @ WinMe. Not tested on any other systems. 

Some faces uses Andale mono font (nice fixed-width font). 
It is available at:  http://www.microsoft.com/typography/downloads/andale32.exe

Hail Eris! All hail Discordia!" nil [505891 525952]) ("color-theme-comidia" function nil nil ((user-visible . t)) "Color theme by Marcelo Dias de Toledo, created 2001-12-17.
Steel blue on black." nil [525954 536532]) ("color-theme-katester" function nil nil ((user-visible . t)) "Color theme by walterh@rocketmail.com, created 2001-12-12.
A pastelly-mac like color-theme." nil [536534 537699]) ("color-theme-arjen" function nil nil ((user-visible . t)) "Color theme by awiersma, created 2001-08-27." nil [537701 549692]) ("color-theme-tty-dark" function nil nil ((user-visible . t)) "Color theme by Oivvio Polite, created 2002-02-01.  Good for tty display." nil [549694 552577]) ("color-theme-aliceblue" function nil nil ((user-visible . t)) "Color theme by Girish Bharadwaj, created 2002-03-27.
Includes comint prompt, custom, font-lock, isearch,
jde, senator, speedbar, and widget." nil [552579 560359]) ("color-theme-black-on-gray" function nil nil ((user-visible . t)) "Color theme by sbhojwani, created 2002-04-03.
Includes ecb, font-lock, paren, semantic, and widget faces.
Some of the font-lock faces are disabled, ie. they look just
like the default face.  This is for people that don't like
the look of \"angry fruit salad\" when editing." nil [560361 565725]) ("color-theme-dark-blue2" function nil nil ((user-visible . t)) "Color theme by Chris McMahan, created 2002-04-12.
Includes antlr, bbdb, change-log, comint, cperl, custom cvs, diff,
dired, display-time, ebrowse, ecb, ediff, erc, eshell, fl, font-lock,
gnus, hi, highlight, html-helper, hyper-apropos, info, isearch, jde,
message, mmm, paren, semantic, senator, sgml, smerge, speedbar,
strokes, term, vhdl, viper, vm, widget, xref, xsl, xxml.  Yes, it is
a large theme." nil [565727 605127]) ("color-theme-blue-mood" function nil nil ((user-visible . t)) "Color theme by Nelson Loyola, created 2002-04-15.
Includes cperl, custom, font-lock, p4, speedbar, widget." nil [605129 611237]) ("color-theme-euphoria" function nil nil ((user-visible . t)) "Color theme by oGLOWo, created 2000-04-19.
Green on black theme including font-lock, speedbar, and widget." nil [611239 615718]) ("color-theme-resolve" function nil nil ((user-visible . t)) "Color theme by Damien Elmes, created 2002-04-24.
A white smoke on blue color theme." nil [615720 626010]) ("color-theme-xp" function nil nil ((user-visible . t)) "Color theme by Girish Bharadwaj, created 2002-04-25.
Includes custom, erc, font-lock, jde, semantic, speedbar, widget." nil [626012 635905]) ("color-theme-gray30" function nil nil ((user-visible . t)) "Color theme by Girish Bharadwaj, created 2002-04-22." nil [635907 646182]) ("color-theme-dark-green" function nil nil ((user-visible . t)) "Color theme by ces93, created 2002-03-30." nil [646184 648919]) ("color-theme-whateveryouwant" function nil nil ((user-visible . t)) "Color theme by Fabien Penso, created 2002-05-02." nil [648921 680197]) ("color-theme-bharadwaj-slate" function nil nil ((user-visible . t)) "Color theme by Girish Bharadwaj, created 2002-05-06." nil [680199 699058]) ("color-theme-lethe" function nil nil ((user-visible . t)) "Color theme by Ivica Loncar, created 2002-08-02.
Some additional X resources as suggested by the author:

Emacs*menubar.Foreground:		Yellow
Emacs*menubar.Background:		#1a2b3c
Emacs*menubar.topShadowColor:		gray
Emacs*menubar.bottomShadowColor:	dimgray

Some fonts I really like (note: this fonts are not highly
available):

Emacs.default.attributeFont: -letl-*-medium-r-*-*-*-*-*-*-*-*-iso8859-2
Emacs*menubar*Font:  -etl-fixed-medium-r-normal--14-*-*-*-*-*-iso8859-1

Mouse fix:

Emacs*dialog*XmPushButton.translations:#override
	  <Btn1Down>:         Arm()
 <Btn1Down>,<Btn1Up>: Activate()			 Disarm()
      <Btn1Down>(2+):     MultiArm()
	<Btn1Up>(2+):       MultiActivate()
	    <Btn1Up>:           Activate()			 Disarm()
      <Key>osfSelect:    ArmAndActivate()
    <Key>osfActivate:   ArmAndActivate()
	<Key>osfHelp:    Help()
 ~Shift ~Meta ~Alt <Key>Return:  ArmAndActivate()
       <EnterWindow>:      Enter()
       <LeaveWindow>:      Leave()


Bonus: do not use 3D modeline." nil [699060 724544]) ("color-theme-shaman" function nil nil ((user-visible . t)) "Color theme by shaman, created 2002-11-11." nil [724546 729059]) ("color-theme-emacs-nw" function nil nil ((user-visible . t)) "Follow emacs21's color-theme, with -nw getting 100% compatibility. 

Alex's `color-theme-emacs-21' follows emacs21's theme, but in the
current scheme of things, that means that when it works on X, it won't
work in -nw perfectly.  The modeline and menuline will have same
colors as the rest of emacs, which can be particularly disturbing when
there are multiple windows.

OTOH, `color-theme-emacs-nw' follows emacs21's theme but the goal is
100% -nw compatibility, and in X; we shall try for decent color
scheme, and as much compability default emacs21's X as possble. 
Bugs to deego@gnufans.org.

TODO: Try to make this theme relative to color-theme-emacs-21 rather
than absolute, viz: call that first and then tweak minor stuff." nil [729061 757513]) ("color-theme" package nil nil nil [757515 757537]))
    )
   )
  )
